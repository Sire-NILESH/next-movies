// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  password  String
  user_list UserMediaList?

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_requests")
}

model UserMediaList {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  items     UserMediaListItem[]
  userId    String              @unique @db.ObjectId
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("user_media_lists")
}

model UserMediaListItem {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  mediaType       MediaType
  mediaId         Int
  media           Media         @relation(fields: [mediaType, mediaId], references: [type, id], onDelete: Cascade)
  userMediaListId String        @db.ObjectId
  userMediaList   UserMediaList @relation(fields: [userMediaListId], references: [id], onDelete: Cascade)

  @@unique([mediaType, mediaId, userMediaListId])
  @@map("user_media_list_items")
}

model Media {
  db_id             String     @id @default(auto()) @map("_id") @db.ObjectId
  id                Int
  title             String?
  backdrop_path     String?
  media_type        MediaType?
  release_date      String?
  first_air_date    String?
  genre_ids         Int[]
  name              String?
  origin_country    String[]
  original_language String?
  original_name     String?
  original_title    String?
  overview          String?
  popularity        Int?
  poster_path       String?
  vote_average      Int?
  vote_count        Int?
  type              MediaType

  userMediaListItem UserMediaListItem[]

  @@unique([type, id])
  @@map("medias")
}

enum MediaType {
  tv
  movie
}
